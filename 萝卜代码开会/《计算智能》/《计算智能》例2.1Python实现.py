#功能：BP神经网络训练过程代码
#《计算智能》p25 例2.1的实现

#初始化
l=0.9      #学习率
x=[1,0,1]  #训练样本
T6=1       #预期分类标号1
w=[[0 , 0 , 0 , 0.2 , -0.3 , 0 ],
   [0 , 0 , 0 , 0.4 , 0.1 , 0 ],
   [0 , 0 , 0 ,-0.5 , 0.2 , 0 ],
   [0 , 0 , 0 , 0 , 0 , -0.3 ],
   [0 , 0 , 0 , 0 , 0 , -0.2 ],
   [0 , 0 , 0 , 0 , 0 , 0 ]]  #权重

Theta=[0,0,0, -0.4  ,0.2 , 0.1 ]  #偏置

S=[0,0,0,0,0,0]      #总输入
O=[0,0,0,0,0,0]      #输出
E=[0,0,0,0,0,0]      #误差

e=2.71828  #自然数

#计算总输入和输出函数
def Cal_S_and_O():   

    S[3]=x[0]*w[0][3]+x[1]*w[1][3]+x[2]*w[2][3]+Theta[3]    #总输入
    O[3]=1/(1+pow(e,(-S[3])))    #输出
    S[4]=x[0]*w[0][4]+x[1]*w[1][4]+x[2]*w[2][4]+Theta[4]    #总输入
    O[4]=1/(1+pow(e,(-S[4])))    #输出
    S[5]=O[3]*w[3][5]+O[4]*w[4][5]+Theta[5]   #总输入
    O[5]=1/(1+pow(e,(-S[5])))    #输出

    #计算误差函数
def Cal_E():
    E[5]=O[5]*(1-O[5])*(T6-O[5])
    E[4]=O[4]*(1-O[4])*w[4][5]*E[5]
    E[3]=O[3]*(1-O[3])*w[3][5]*E[5]

    #调整权值函数
def Adjust_w():
    for i in range(6):
        for j in range(6):
            w[i][j]+=l*O[i]*E[j]

    #调整偏置函数
def Adjust_Theta():
    for i in range(6):
        Theta[i]+=l*E[i]


Cal_S_and_O()#计算总输入和输出
Cal_E()
Adjust_w()
Adjust_Theta()

#print(S)
#print(O)
#print(E)


print("调整后权值如下")
for i in w:
    print(i)

print("调整后偏置如下")
print(Theta)


